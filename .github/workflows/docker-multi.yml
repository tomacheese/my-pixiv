name: Docker

on:
  pull_request_target:
    branches:
      - main
      - master
    types:
      - opened
      - synchronize
      - reopened
      - closed

env:
  REGISTRY: ghcr.io
  DOCKER_USERNAME: ${{ github.actor }}
  DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  calc-version:
    name: Calculate next version
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.tag-version.outputs.new_tag }}
      changelog: ${{ steps.tag-version.outputs.changelog }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          # „Éû„Éº„Ç∏„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÊôÇ„Å´„ÅØ github.event.pull_request.head.sha „Çí‰Ωø„ÅÑ„ÄÅ„Éû„Éº„Ç∏„Åï„Çå„ÅüÊôÇ„Å´„ÅØmaster„Çí‰Ωø„ÅÜ
          ref: ${{ github.event.pull_request.merged == false && github.event.pull_request.head.sha || 'refs/heads/master' }}

      - name: Bump version and push tag
        id: tag-version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: 'minor'
          custom_release_rules: 'feat:minor:‚ú® Features,fix:patch:üêõ Fixes,docs:patch:üì∞ Docs,chore:patch:üé® Chore,pref:patch:üéà Performance improvements,refactor:patch:üßπ Refactoring,build:patch:üîç Build,ci:patch:üîç CI,revert:patch:‚è™ Revert,style:patch:üßπ Style,test:patch:üëÄ Test'
          dry_run: ${{ github.event.pull_request.merged == false }}

  build:
    name: Docker build (${{ fromJson(matrix.target).file }}, ${{ matrix.platform }})
    runs-on: ubuntu-latest
    needs: calc-version

    strategy:
      fail-fast: false
      matrix:
        target:
          - '{ imageName: "tomacheese/my-pixiv", file: "view.Dockerfile", packageName: "my-pixiv" }'
          - '{ imageName: "tomacheese/my-pixiv-api", file: "api.Dockerfile", packageName: "my-pixiv-api" }'
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Remove platform prefix
        id: platform
        run:
          echo "shortPlatform=`echo ${{ matrix.platform }} | sed -r -e 's/^[^\/]+\///'`" >> $GITHUB_OUTPUT

      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2.0.1
        if: github.event.pull_request.merged == true
        id: deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.calc-version.outputs.tag }}
          environment: '${{ fromJson(matrix.target).packageName }}:${{ steps.platform.outputs.shortPlatform }}'
          environment-url: https://github.com/${{ github.repository }}/pkgs/container/${{ fromJson(matrix.target).packageName }}

      - name: Update deployment status (in_progress)
        uses: chrnorm/deployment-status@v2.0.1
        if: github.event.pull_request.merged == true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: in_progress
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          # „Éû„Éº„Ç∏„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÊôÇ„Å´„ÅØ github.event.pull_request.head.sha „Çí‰Ωø„ÅÑ„ÄÅ„Éû„Éº„Ç∏„Åï„Çå„ÅüÊôÇ„Å´„ÅØmaster„Çí‰Ωø„ÅÜ
          ref: ${{ github.event.pull_request.merged == false && github.event.pull_request.head.sha || 'refs/heads/master' }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ${{ env.REGISTRY }}
        if: github.event.pull_request.merged == true
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: package.json update version
        run: |
          sed -r -i "1,/version/s/\"version\": \".+\"/\"version\": \"${{ needs.calc-version.outputs.tag }}\"/" view/package.json
          sed -r -i "1,/version/s/\"version\": \".+\"/\"version\": \"${{ needs.calc-version.outputs.tag }}\"/" api/package.json
          git diff

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          images: ${{ env.REGISTRY }}/${{ fromJson(matrix.target).imageName }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          file: ${{ fromJson(matrix.target).file }}
          push: ${{ github.event.pull_request.merged == true }}
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ fromJson(matrix.target).packageName }}-${{ steps.platform.outputs.shortPlatform }}
          cache-to: type=gha,mode=max,scope=${{ fromJson(matrix.target).packageName }}-${{ steps.platform.outputs.shortPlatform }}

      - name: Update deployment status (success)
        uses: chrnorm/deployment-status@v2.0.1
        if: ${{ success() && github.event.pull_request.merged == true }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: success
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: ${{ failure() && github.event.pull_request.merged == true }}
        uses: chrnorm/deployment-status@v2.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: failure
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

  release:
    name: Release ${{ needs.calc-version.outputs.tag }}
    runs-on: ubuntu-latest
    needs:
      - calc-version
      - build
    if: github.event.pull_request.merged == true

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.calc-version.outputs.tag }}
          release_name: ${{ needs.calc-version.outputs.tag }}
          body: ${{ needs.calc-version.outputs.changelog }}
          draft: false
          prerelease: false
